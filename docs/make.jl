using Documenter
using WannierIO
using Wannier
using WannierPlots

include("common.jl")

#=
I put each tutorial inside the corresponding subdir in `tutorials/`
(so that the tutorial script is in the same folder as the input files, e.g.
win, amn, mmn, eig), and let Literate.jl generates markdown from them.
Then Documenter.jl processes the markdown and renders HTML.
=#

# the folder where the Literate.jl tutorial scripts are stored
const TUTORIALS_SRCDIR = joinpath(@__DIR__, "../tutorials")
# the folder where the Documenter.jl md (generated by Literate.jl) are stored
const TUTORIALS_OUTDIR = joinpath(@__DIR__, "src/tutorials")
# the folder for saving HTML plots, also the folder where Literate.jl generated
# markdown files will be executed by Documenter.jl, and the folder where
# Documenter.jl stores the final HTML pages
const TUTORIALS_BUILDDIR = joinpath(@__DIR__, "build/tutorials")
# the folder where the Literate.jl scripts for WannierPlots examples are stored
const PLOTS_EXAMPLES_SRCDIR = joinpath(@__DIR__, "src/WannierPlots/examples")
# the build dir of WannierPlots examples, where the Literate.jl generated markdown
# files will be executed by Documenter.jl
const PLOTS_EXAMPLES_BUILDDIR = joinpath(@__DIR__, "build/WannierPlots/examples")

#=
I will copy necessary input files (mmn, ...) to the Documenter.jl build folder,
so I disable the auto clean feature of Documenter.jl.
However, I still want a clean build every time, so I manually clean the
build folder here.
=#
const BUILD_DIR = joinpath(@__DIR__, "build")
isdir(BUILD_DIR) && rm(BUILD_DIR; recursive=true, force=true)
#=
Clean also the generated tutorial files by Literate.jl,
otherwise Documenter.jl will still process them even if I comment out
all the tutorial pages in the following `makedocs` call.
Note I only delete corresponding folders instead of the whole
`TUTORIALS_OUTDIR`, because there are still some useful files, e.g., `foreword.md`
=#
for subdir in readdir(TUTORIALS_SRCDIR)
    if isdir(joinpath(TUTORIALS_SRCDIR, subdir))
        rm(joinpath(TUTORIALS_OUTDIR, subdir); recursive=true, force=true)
    end
end
# also clean the WannierPlots example folders, but here the src jl script are
# inside this folder, so I only rm the md and notebook files
for file in readdir(PLOTS_EXAMPLES_SRCDIR)
    filepath = joinpath(PLOTS_EXAMPLES_SRCDIR, file)
    if isfile(filepath) && (endswith(file, ".md") || endswith(file, ".ipynb"))
        rm(filepath; force=true)
    end
end

# The processing of tutorials and examples take quite some time, to speed up
# development, set this flag to true to skip them.
SKIP_TUTORIALS = false
# SKIP_TUTORIALS = true

# Process tutorials by Literate.jl
!SKIP_TUTORIALS && include("literate.jl")

#=
the tutorials are auto-generated by Literate.jl
Here you can specify the name of tutorial page shown in the left sidebar,
by changing the key of the pair.
=#
tutorials_pages = [
    "Foreword" => "tutorials/foreword.md",
    "Maximal localization" => "tutorials/1-maxloc/tutorial.md",
    "Disentanglement" => "tutorials/2-disentangle/tutorial.md",
    "Band structure" => "tutorials/3-band/tutorial.md",
    "Real space WF" => "tutorials/4-realspace/tutorial.md",
    "Parallel transport" => "tutorials/5-parallel_transport/tutorial.md",
    "Split valence/conduction" => "tutorials/6-split/tutorial.md",
    "Constrain WF center" => "tutorials/7-constrain_center/tutorial.md",
    "Fermi surface" => "tutorials/8-fermi_surface/tutorial.md",
    "Parallel transport with custom b-vectors" => "tutorials/9-parallel_transport_bvectors/tutorial.md",
    # "Cooptimize spin-polarized WFs" => "tutorials/10-coopt/tutorial.md",
]
# the examples are auto-generated by Literate
plots_examples_pages = [
    "Band structure" => "WannierPlots/examples/1-band.md",
    "Real space WFs" => "WannierPlots/examples/2-wf.md",
    "Fermi surface" => "WannierPlots/examples/3-fermisurf.md",
]

if SKIP_TUTORIALS
    tutorials_pages = []
    plots_examples_pages = []
end

# generate the HTML pages by Documenter.jl
makedocs(;
    sitename="Wannier.jl",
    authors="Junfeng Qiao and contributors.",
    # do not clean the build folder before building, since I have copied
    # manually all the input files (mmn, ...) to the build folder
    clean=false,
    modules=[WannierIO, Wannier, WannierPlots],
    pages=[
        "Home" => "index.md",
        "Getting Started" => "start.md",
        "Tutorials" => tutorials_pages,
        "Theory" => [
            "Algorithm" => "theory/algorithm.md",
            "Normalization" => "theory/normalization.md",
            "Initial projection" => "theory/initial_projection.md",
        ],
        "API" => [
            "Utility" => "api/util.md",
            "Input/Output" => "api/io.md",
            "B vector" => "api/bvector.md",
            "Model" => "api/model.md",
            "Wannierize" => "api/wannierize.md",
            "Interpolation" => "api/interpolation.md",
            "Real space" => "api/realspace.md",
            "Command line" => "api/cli.md",
        ],
        "Additional packages" => [
            "WannierIO" => [
                "Home" => "WannierIO/index.md",
                "API" => [
                    "Convention" => "WannierIO/api/convention.md",
                    "Util" => "WannierIO/api/util.md",
                    "Wannier90" => "WannierIO/api/w90.md",
                    "Volumetric data" => "WannierIO/api/volumetric.md",
                    "QE" => "WannierIO/api/qe.md",
                ],
            ],
            "WannierPlots" => [
                "Home" => "WannierPlots/index.md",
                "Examples" => plots_examples_pages,
                "API" => [
                    "Band" => "WannierPlots/api/band.md",
                    "Real space" => "WannierPlots/api/realspace.md",
                    "B vector" => "WannierPlots/api/bvector.md",
                    "Fermi surface" => "WannierPlots/api/fermisurf.md",
                ],
            ],
        ],
    ],
)
